#pragma checksum "E:\SUENWORK\SUEN\-SliceFileDemo\SliceFileUpload\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "4d3b15d15d5a0f2256d30f11a008fb9c716db713"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "E:\SUENWORK\SUEN\-SliceFileDemo\SliceFileUpload\Views\_ViewImports.cshtml"
using SliceFileUpload;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\SUENWORK\SUEN\-SliceFileDemo\SliceFileUpload\Views\_ViewImports.cshtml"
using SliceFileUpload.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"4d3b15d15d5a0f2256d30f11a008fb9c716db713", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"115e116b4bb20d25aa34f4243adbaa0e790261de", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "E:\SUENWORK\SUEN\-SliceFileDemo\SliceFileUpload\Views\Home\Index.cshtml"
  
    ViewData["Title"] = "Home Page";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"<div class=""text-center"">
    <h1 class=""display-4"">Slice File Upload Demo</h1>
    <input type=""file"" id=""fileUpload"" name=""SeclectFiles"">
    <button type=""button"" class=""btn btn-primary"" data-loading-text=""Loading..."" id=""upload"">上传文件</button>
    <h4 id=""jindu""></h4>
</div>
<script type=""text/javascript"">
    // 对Date的扩展，将 Date 转化为指定格式的String   
    // 月(M)、日(d)、小时(H)、分(m)、秒(s)、季度(q) 可以用 1-2 个占位符，   
    // 年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字)   
    // 例子：   
    // (new Date()).Format(""yyyy-MM-dd HH:mm:ss.S"") ==> 2006-07-02 08:09:04.423   
    // (new Date()).Format(""yyyy-M-d H:m:s.S"")      ==> 2006-7-2 8:9:4.18   
    Date.prototype.Format = function (fmt) { //author: meizz   
        var o = {
            ""M+"": this.getMonth() + 1,                 //月份   
            ""d+"": this.getDate(),                    //日   
            ""h+"": this.getHours(),                   //小时   
            ""m+"": this.getMinutes(),                 //分   
            ""s+"": this.getSeconds(),      ");
            WriteLiteral(@"           //秒   
            ""q+"": Math.floor((this.getMonth() + 3) / 3), //季度   
            ""S"": this.getMilliseconds()             //毫秒   
        };
        if (/(y+)/.test(fmt))
            fmt = fmt.replace(RegExp.$1, (this.getFullYear() + """").substr(4 - RegExp.$1.length));
        for (var k in o)
            if (new RegExp(""("" + k + "")"").test(fmt))
                fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : ((""00"" + o[k]).substr(("""" + o[k]).length)));
        return fmt;
    }


    window.onload = function () {
        (function ($) {
            // set btn loading text
            var Show = function (text) {
                $(""#show"").text(text + ""%"");
            }
            // 上传
            var btnClick = function () {
                Now();
                getFile();
            };
            // 获取文件
            var getFile = function () {
                var files = $(""#fileUpload"").prop(""files"");//获取文件列表
                if (!files || files.le");
            WriteLiteral(@"ngth <= 0) {
                    throw ""文件不存在！""
                }
                fileReader(files, Slice);
            }
            // 文件流
            var bufToBlob = function (buf, mimeType = """") {
                return new Blob([buf], { type: mimeType });
            }
            var fileReader = function (files,callback) {
                for (var i = 0; i < files.length; i++) {
                    var reader = new FileReader();
                    var file = files[i];
                    reader.readAsArrayBuffer(files[i]);
                    reader.onload = function (files) {
                        var filesblob = bufToBlob(this.result, file.type);
                        if (typeof callback == 'function') {
                            callback(filesblob, file);
                        }
                    };
                }
            }
            // 二进制大刀
            var blobSlice = function (blob, start, end, type) {
                type = type || blob.type;
        ");
            WriteLiteral(@"        if (blob.slice) {
                    return blob.slice(start, end,type);
                } else if (blob.mozSlice) { // 兼容firefox
                    return blob.mozSlice(start, end,type);
                } else if (blob.webkitSlice) { // 兼容webkit
                    return blob.webkitSlice(start, end, type);
                } else {
                    throw ""slice error!!!""
                }
            }
            // 二进制切片
            var Slice = function (blob, file) {
                var fileData = {
                    fileKey: new Date().getTime(), //文件标识，最好guid代替
                    sliceSize: 1024 * 1024,//500K
                    size: file.size,
                    fileName: file.name,
                    fileType: file.type,
                    chunkIndex: 0,
                    chunk: null
                }
                var count = parseInt(fileData.size / fileData.sliceSize);
                fileData.chunkCount = (fileData.size % fileData.sliceSize) > 0 ? coun");
            WriteLiteral(@"t + 1 : count;
                var startByte = 0, endByte = 0;
                var Cutting = function (sendSlice) {
                    if (startByte < fileData.size) {
                        // >chunk
                        var bSlice = function () {
                            fileData.chunkIndex++;
                            fileData.chunk = blobSlice(blob, startByte, endByte);
                            if (typeof sendSlice == ""function"") {
                                sendSlice(fileData, fileData);
                            }
                            startByte = endByte;
                            if (endByte < fileData.size) {
                                Cutting(sendSlice);
                            }
                        }
                        if ((startByte + fileData.sliceSize) <= fileData.size) {
                            endByte = startByte + fileData.sliceSize;
                            bSlice();
                        }
                        // ");
            WriteLiteral(@"<chunk
                        if (startByte < fileData.size) {
                            endByte = fileData.size;
                            bSlice();
                        }
                    }
                }
                Cutting(SendBlob); //每片上传服务器
            };
            // 发送切片数据
            // chunk为每块数据，data为此文件的描述
            var SendBlob = async function (chunk,data) {
                var formData = new FormData();
                formData.append('file', chunk.chunk, 'blob');
                for (var param in chunk) {
                    if (param != ""chunk"") {
                        formData.append(param, chunk[param]);
                    }
                }
                Post('/Upload/File', formData, { data });
                
            }
            var Post = function (url, formData, { data }) {
                $.ajax({
                    url: url,
                    type: 'post',
                    processData: false, //很重要，告诉jquery不要对form进行处");
            WriteLiteral(@"理
                    contentType: false, //很重要，指定为false才能形成正确的Content-Type
                    //async: false,
                    data: formData,
                    dataType: 'json',
                    success: function (res) {
                        Now();
                        if (!res.status) {
                            alert(""上传文件错误；注意Console！"");
                        }
                        if (res.end) {
                            Now();
                            alert(""上传完成！！"");
                        }
                        $(""#jindu"").text((parseFloat(res.chunkIndex / res.chunkCount)) * 100 + ""%"");
                    },
                    error: function (jqXHR, status, errorThrown) {
                        throw (status + '----' + errorThrown);
                    }
                })
            }
            $(""#upload"").on(""click"", btnClick);
            if (!(window.File || window.FileReader || window.FileList || window.Blob)) {
                throw ");
            WriteLiteral("\"用Chrome浏览器!!\";\r\n            }\r\n            var Now = function () {\r\n                console.log(new Date().Format(\"yyyy-MM-dd hh:mm:ss\"));\r\n            }\r\n        })(jQuery);\r\n\r\n    }\r\n</script>\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
